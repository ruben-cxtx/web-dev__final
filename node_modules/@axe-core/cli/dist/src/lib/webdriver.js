"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDriver = void 0;
const path_1 = __importDefault(require("path"));
const chromedriver_1 = __importDefault(require("chromedriver"));
const selenium_webdriver_1 = require("selenium-webdriver");
const chrome_1 = __importDefault(require("selenium-webdriver/chrome"));
const utils_1 = require("./utils");
const startDriver = (config) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    const scriptTimeout = config.timeout * 1000.0;
    let builder;
    /* istanbul ignore else */
    if (config.browser === 'chrome-headless') {
        const service = new chrome_1.default.ServiceBuilder((_b = (_a = config.chromedriverPath) !== null && _a !== void 0 ? _a : utils_1.CHROMEDRIVER_TEST_PATH) !== null && _b !== void 0 ? _b : chromedriver_1.default.path);
        let options = new chrome_1.default.Options();
        // selenium-webdriver < 4.17.0
        if ('headless' in options && typeof options.headless === 'function') {
            options.headless();
        }
        // selenium-webdriver >= 4.17.0
        else {
            options.addArguments('headless');
        }
        if ((_c = config.chromeOptions) === null || _c === void 0 ? void 0 : _c.length) {
            options = config.chromeOptions.reduce(function (options, arg) {
                options.addArguments(arg);
                return options;
            }, options);
        }
        if (utils_1.CHROME_TEST_PATH) {
            options.setChromeBinaryPath(path_1.default.resolve(utils_1.CHROME_TEST_PATH));
            // Required for CI runners using >=Ubuntu 24.04
            // @see https://github.com/SeleniumHQ/selenium/issues/14609
            options.addArguments('no-sandbox');
        }
        if (config.chromePath) {
            options.setChromeBinaryPath(path_1.default.resolve(config.chromePath));
        }
        builder = new selenium_webdriver_1.Builder()
            .forBrowser('chrome')
            .setChromeOptions(options)
            .setChromeService(service);
    }
    else {
        builder = new selenium_webdriver_1.Builder().forBrowser(config.browser);
    }
    config.builder = builder;
    const driver = builder.build();
    yield driver.manage().setTimeouts({ script: scriptTimeout });
    return driver;
});
exports.startDriver = startDriver;
//# sourceMappingURL=webdriver.js.map